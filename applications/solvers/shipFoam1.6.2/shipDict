/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.5                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      shipDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
/*--*\
shipFoam is based in interDyMFoam, extended with the possibility to move boundary patches based in hydrostatic forces/moments and additional external forces/moments.
At every time step the following ordinary differntial equation is calculated:
F = mass (/inertia) * x" + damping * x' + spring * x

with:
F = external force (or moment) + gravity force + pressure force. Although turbulence forces are also calculated and printed in the log file, these are not added.
mass / inertia: speaks for itself
x" = accelleration of DOF x (which can be 3 translations and 3 rotations)
damping: speaks for itself
x' = velocity of DOF x. This velocity is mapped on the field pointMotionU on the respective motionPatch.
spring: external spring as supplied in the shipDict + hydrostatic spring term.
Hydrostatic spring is calculated by using the actual pressure force and recalculate this pressure force with a slightly translated motionPatch, which is similar to pushing the motionpatch a small amount in a certain direction and measuring the difference in forces.
x = translation / rotation DOF. Depending on user input, any of the 6 DOF's (or all) can be calculated 


\*--*/



startUpdate     	5;		//number of timesteps before force balance solver starts to do its work. This can be usefull to obtain a stable pressure field in the first few time steps
weightFactor    	( 1 2 1 );	// The pressure field is used to calculate forces and moments on the motionpatch. These results may fluctuate heavily, causing diverging solution. By damping the force/moment results the fluctuations are drastically reduced. The 1st entry gives the weighting of the current force/moment, the 2nd entry the weighting of the previous time step results and the 3rd entry the weighting of 2 time steps ago. 

//writing of additional text file with motion path of CoG
writeCoG		yes;	//if yes, writes a text file with positions and angles of centre of gravity
writeInterval		5;	//How often to you want a cog position in the text file? Number of time steps

bodies				//subdict. You can define a maximum of 4 motion patches
{
	Hull			//Name of motion patch. Must exist in mesh
	{
	aMax            	10;		//maximum allowable acceleration. Motion gets limited if this value is exceeded

	CoG             	(0 0 0.4);	//Position of centre of gravity in global coordinates.
	bodyRotation		(0 0 0);	//rotation of motion patch local coordinate system in degrees
						//This is necessary if the motion patch is not aligned with the global coord. sys.
	//Translation parameters		translation vectors correspond with translation in (Xdir Ydir Zdir)
	calcTranslationDOF 	(1 0 1);	//Which translations to calculate. In this example only in X and Z direction
	initialVelocity		(0 0 -1);	//Velocity at start of motion patch
	constantForce		(0 0 0);	//Additional external force
	mass            	70;		//mass [kg]
	linearDamping   	(0 0 0 );	//constant damping term
	linearSpring    	(0 0 0);	//Additional spring term. The hydrostatic spring term (e.g. for ships the surface of waterline) is automatically calculated so does not need to be supplied.
	
	//Rotation parameters			//Analogue to translation.
	calcRotationDOF 	(1 1 1);	
	initialRotationSpeed	(0 0 0);
	constantMoment		(0 0 0);
	momentOfInertia 	(5 5 5);
	linearDamping_rot 	(0 0 0);
	linearSpring_rot 	(0 0 0);
	}

}

//Parameters for Ordinary Differential Equations
ODECoeffs       
{
    ODESolver       	RK;			//Runge Kutta
    eps             	0.0001;			//tolerance
    hEst            	0.5;			//initial step size
}


// ************************************************************************* //
